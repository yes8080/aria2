name: Monitor Aria2 Releases

on:
  schedule:
    - cron: '0 * * * *' # 每小时检查一次
  workflow_dispatch: # 允许手动触发

jobs:
  check_and_update:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for new release and get download URLs
        id: check_release
        run: |
          $repo = "aria2/aria2"
          $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases/latest"
          $newVersion = $latestRelease.tag_name
          $downloadUrls = @($latestRelease.assets.browser_download_url)

          if (-not $downloadUrls) {
            Write-Host "No download URLs found."
            exit 1
          }

          # Save the new version and download URLs to environment variables
          echo "::set-output name=new_version::$newVersion"
          echo "::set-output name=download_urls::$(ConvertTo-Json $downloadUrls)"
        shell: pwsh

      - name: Debug Print DOWNLOAD_URLS
        if: steps.check_release.outputs.new_version != ''
        run: |
          Write-Host "DEBUG: DOWNLOAD_URLS=${{ steps.check_release.outputs.download_urls }}"
          Write-Host "DEBUG: New Version=${{ steps.check_release.outputs.new_version }}"

      - name: Download and process new release
        if: steps.check_release.outputs.new_version != ''
        id: download_process
        run: |
          $NEW_VERSION = "${{ steps.check_release.outputs.new_version }}"
          $DOWNLOAD_URLS = ConvertFrom-Json "${{ steps.check_release.outputs.download_urls }}"

          $downloadDir = "$env:GITHUB_WORKSPACE\downloads"
          if (-not (Test-Path $downloadDir)) {
            New-Item -ItemType Directory -Force -Path $downloadDir
          }

          foreach ($url in $DOWNLOAD_URLS) {
            $filename = [System.IO.Path]::GetFileName($url)
            Write-Host "Attempting to download from: $url"
            Invoke-WebRequest -Uri $url -OutFile "$downloadDir\$filename"

            if ($filename -like "*64bit*") {
              Expand-Archive -Path "$downloadDir\$filename" -DestinationPath "$downloadDir\aria2-$NEW_VERSION-win-64bit-build1"
              Copy-Item "$env:GITHUB_WORKSPACE\dl.bat" "$downloadDir\aria2-$NEW_VERSION-win-64bit-build1\"
              Compress-Archive -Path "$downloadDir\aria2-$NEW_VERSION-win-64bit-build1\*" -DestinationPath "$downloadDir\aria2-$NEW_VERSION-win-64bit-build1-with-dl-bat.zip"
            } elseif ($filename -like "*32bit*") {
              Expand-Archive -Path "$downloadDir\$filename" -DestinationPath "$downloadDir\aria2-$NEW_VERSION-win-32bit-build1"
              Copy-Item "$env:GITHUB_WORKSPACE\dl.bat" "$downloadDir\aria2-$NEW_VERSION-win-32bit-build1\"
              Compress-Archive -Path "$downloadDir\aria2-$NEW_VERSION-win-32bit-build1\*" -DestinationPath "$downloadDir\aria2-$NEW_VERSION-win-32bit-build1-with-dl-bat.zip"
            }
          }
        shell: pwsh

      - name: Create Release
        if: steps.download_process.outcome == 'success'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.check_release.outputs.new_version }}
          name: "Aria2 with dl.bat included"
          body: "This release includes the original Aria2 binaries along with a custom dl.bat script."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        if: steps.create_release.outcome == 'success'
        run: |
          $NEW_VERSION = "${{ steps.check_release.outputs.new_version }}"
          gh release upload "v$NEW_VERSION" `
            "$env:GITHUB_WORKSPACE\downloads\aria2-$NEW_VERSION-win-64bit-build1-with-dl-bat.zip" `
            "$env:GITHUB_WORKSPACE\downloads\aria2-$NEW_VERSION-win-32bit-build1-with-dl-bat.zip" `
            --clobber
        shell: pwsh
