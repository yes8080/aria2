name: Monitor Aria2 Releases

on:
  workflow_dispatch: # 允许手动触发

jobs:
  check_and_update:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for new release and prepare assets
        id: prepare_assets
        run: |
          $repo = "aria2/aria2"
          try {
            $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases/latest" -ErrorAction Stop
            $newVersion = $latestRelease.tag_name -replace '^release-', ''
            $assets = $latestRelease.assets | Where-Object { $_.browser_download_url -like "*win-*bit-build*" }
            
            if (-not $assets) {
              Write-Host "No compatible Windows assets found."
              exit 1
            }

            $assetInfo = foreach ($asset in $assets) {
              @{
                url = $asset.browser_download_url
                filename = [System.IO.Path]::GetFileName($asset.browser_download_url)
                arch = if ($asset.name -like "*64bit*") { "64bit" } else { "32bit" }
              }
            }

            $assetInfoJson = ConvertTo-Json $assetInfo

            echo "new_version=$newVersion"

            echo "new_version=$newVersion" >> $GITHUB_OUTPUT
            echo "asset_info=$assetInfoJson" >> $GITHUB_OUTPUT

            echo $GITHUB_OUTPUT
            
          } catch {
            Write-Host "Failed to fetch latest release information: $_"
            exit 1
          }
        shell: pwsh
        
      - name: Debug outputs
        run: |
          echo "New Version: ${{ steps.prepare_assets.outputs.new_version }}"
          echo "Asset Info: ${{ steps.prepare_assets.outputs.asset_info }}"
        shell: pwsh
            
      - name: Download and process assets
        if: steps.prepare_assets.outputs.new_version != ''
        id: download_process
        run: |
          $NEW_VERSION = "${{ steps.prepare_assets.outputs.new_version }}"
          $ASSET_INFO = ConvertFrom-Json "${{ steps.prepare_assets.outputs.asset_info }}"
          
          $downloadDir = "$env:GITHUB_WORKSPACE\downloads"
          New-Item -ItemType Directory -Force -Path $downloadDir | Out-Null
          echo "download_dir=$downloadDir" >> $GITHUB_OUTPUT

          foreach ($asset in $ASSET_INFO) {
            $filename = $asset.filename
            $arch = $asset.arch
            Write-Host "Attempting to download from: $($asset.url)"
            Invoke-WebRequest -Uri $asset.url -OutFile "$downloadDir\$filename" -ErrorAction Stop

            Expand-Archive -Path "$downloadDir\$filename" -DestinationPath "$downloadDir\aria2-$NEW_VERSION-win-$arch-build1" -Force
            Copy-Item "$env:GITHUB_WORKSPACE\dl.bat" "$downloadDir\aria2-$NEW_VERSION-win-$arch-build1\" -Force
            Compress-Archive -Path "$downloadDir\aria2-$NEW_VERSION-win-$arch-build1\*" -DestinationPath "$downloadDir\aria2-$NEW_VERSION-win-$arch-build1-with-dl-bat.zip" -Force
          }
        shell: pwsh

      - name: Create and upload release
        if: steps.download_process.outcome == 'success'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "aria2 ${{ steps.prepare_assets.outputs.new_version }} for Windows"
          tag_name: "v${{ steps.prepare_assets.outputs.new_version }}"
          body: "This release includes the original Aria2 binaries along with a custom dl.bat script."
          make_latest: true
          files: |
            ${{ steps.download_process.outputs.download_dir }}\aria2-${{ steps.prepare_assets.outputs.new_version }}-win-64bit-build1-with-dl-bat.zip
            ${{ steps.download_process.outputs.download_dir }}\aria2-${{ steps.prepare_assets.outputs.new_version }}-win-32bit-build1-with-dl-bat.zip
