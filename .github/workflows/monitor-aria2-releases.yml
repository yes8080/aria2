name: Monitor Aria2 Releases

on:
  schedule:
    - cron: '0 * * * *' # 每小时检查一次
  workflow_dispatch: # 允许手动触发

jobs:
  check_and_update:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for new release and get download URLs
        id: check_release
        run: |
          $latestReleaseUrl = "https://api.github.com/repos/aria2/aria2/releases/latest"
          $response = Invoke-RestMethod -Uri $latestReleaseUrl -Method Get -Headers @{"Accept"="application/vnd.github.v3+json"}
          $latestTag = $response.tag_name.TrimStart("v")
          
          if (Test-Path .latest_version) {
            $currentTag = Get-Content .latest_version
          } else {
            $currentTag = ""
          }
          
          if ($currentTag -ne $latestTag) {
            echo "::set-output name=new_version::$latestTag"
            Set-Content -Path .latest_version -Value $latestTag
            
            # Extract download URLs for assets that contain "-win" in their name
            $downloadUrls = $response.assets | Where-Object { $_.name -like "*-win*" } | Select-Object -ExpandProperty browser_download_url
            $downloadUrlsJson = $downloadUrls | ConvertTo-Json -Compress
            echo "::set-output name=download_urls::$downloadUrlsJson"
          } else {
            Write-Host "No new version found."
          }
        shell: pwsh

      - name: Download and process new release
        if: steps.check_release.outputs.new_version != ''
        id: download_process
        run: |
          $NEW_VERSION = "${{ steps.check_release.outputs.new_version }}"
          $downloadUrls = ${{ fromJson(steps.check_release.outputs.download_urls) }}

          foreach ($url in $downloadUrls) {
            $fileName = [System.IO.Path]::GetFileName($url)
            Write-Host "Attempting to download from: $url"
            try {
              Invoke-WebRequest -Uri $url -OutFile $fileName -ErrorAction Stop
              Write-Host "Downloaded $fileName successfully."
            } catch {
              Write-Host "Failed to download $fileName: $_"
              exit 1
            }
          }

          # Process downloaded files based on the filenames
          if (Test-Path "aria2-${NEW_VERSION}-win-64bit-build1.zip") {
            Expand-Archive "aria2-${NEW_VERSION}-win-64bit-build1.zip" -DestinationPath .
            Copy-Item ./dl.bat "aria2-${NEW_VERSION}-win-64bit-build1/"
            Compress-Archive -Path "aria2-${NEW_VERSION}-win-64bit-build1" -DestinationPath "aria2-${NEW_VERSION}-win-64bit-build1-with-dl-bat.zip"
          }

          if (Test-Path "aria2-${NEW_VERSION}-win-32bit-build1.zip") {
            Expand-Archive "aria2-${NEW_VERSION}-win-32bit-build1.zip" -DestinationPath .
            Copy-Item ./dl.bat "aria2-${NEW_VERSION}-win-32bit-build1/"
            Compress-Archive -Path "aria2-${NEW_VERSION}-win-32bit-build1" -DestinationPath "aria2-${NEW_VERSION}-win-32bit-build1-with-dl-bat.zip"
          }
        shell: pwsh

      - name: Create Release
        if: steps.download_process.outcome == 'success'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.check_release.outputs.new_version }}
          name: "Aria2 with dl.bat included"
          body: "This release includes the original Aria2 binaries along with a custom dl.bat script."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        if: steps.create_release.outcome == 'success'
        run: |
          $NEW_VERSION = "${{ steps.check_release.outputs.new_version }}"
          gh release upload "v${NEW_VERSION}" `
            "aria2-${NEW_VERSION}-win-64bit-build1-with-dl-bat.zip" `
            "aria2-${NEW_VERSION}-win-32bit-build1-with-dl-bat.zip" `
            --clobber
        shell: pwsh
