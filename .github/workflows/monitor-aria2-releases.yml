name: Monitor Aria2 Releases

on:
  schedule:
    - cron: '0 * * * *' # 每小时检查一次
  workflow_dispatch: # 允许手动触发

jobs:
  check_and_update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Check for new release and get download URLs
        id: check_release
        run: |
          import json
          import requests

          latest_release_url = "https://api.github.com/repos/aria2/aria2/releases/latest"
          response = requests.get(latest_release_url, headers={"Accept": "application/vnd.github.v3+json"})
          response.raise_for_status()
          latest_tag = response.json()['tag_name'].lstrip('v')

          current_tag = ''
          if os.path.exists('.latest_version'):
              with open('.latest_version', 'r') as file:
                  current_tag = file.read().strip()

          if current_tag != latest_tag:
              print(f"::set-output name=new_version::{latest_tag}")
              with open('.latest_version', 'w') as file:
                  file.write(latest_tag)

              assets = [asset['browser_download_url'] for asset in response.json()['assets'] if '-win' in asset['name']]
              print(f"::set-output name=download_urls::{json.dumps(assets)}")
          else:
              print("No new version found.")

      - name: Download and process new release
        if: steps.check_release.outputs.new_version != ''
        id: download_process
        run: |
          NEW_VERSION=${{ steps.check_release.outputs.new_version }}
          DOWNLOAD_URLS=$(echo ${{ steps.check_release.outputs.download_urls }} | jq -r '.[]')

          mkdir -p downloads
          cd downloads

          for url in $DOWNLOAD_URLS; do
            filename=$(basename "$url")
            echo "Attempting to download from: $url"
            curl -L -o "$filename" "$url"
            if [[ $filename == *"64bit"* ]]; then
              unzip "$filename" -d "aria2-${NEW_VERSION}-win-64bit-build1"
              cp ../dl.bat "aria2-${NEW_VERSION}-win-64bit-build1/"
              zip -r "aria2-${NEW_VERSION}-win-64bit-build1-with-dl-bat.zip" "aria2-${NEW_VERSION}-win-64bit-build1"
            elif [[ $filename == *"32bit"* ]]; then
              unzip "$filename" -d "aria2-${NEW_VERSION}-win-32bit-build1"
              cp ../dl.bat "aria2-${NEW_VERSION}-win-32bit-build1/"
              zip -r "aria2-${NEW_VERSION}-win-32bit-build1-with-dl-bat.zip" "aria2-${NEW_VERSION}-win-32bit-build1"
            fi
          done

      - name: Create Release
        if: steps.download_process.outcome == 'success'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.check_release.outputs.new_version }}
          name: "Aria2 with dl.bat included"
          body: "This release includes the original Aria2 binaries along with a custom dl.bat script."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        if: steps.create_release.outcome == 'success'
        run: |
          NEW_VERSION=${{ steps.check_release.outputs.new_version }}
          gh release upload "v${NEW_VERSION}" \
            "downloads/aria2-${NEW_VERSION}-win-64bit-build1-with-dl-bat.zip" \
            "downloads/aria2-${NEW_VERSION}-win-32bit-build1-with-dl-bat.zip" \
            --clobber
